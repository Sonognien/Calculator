using Gtk, SymPy, Calculus

# Fenêtre principale
win = GtkWindow("Calculatrice scientifique", 400, 600)
set_gtk_property!(win, :resizable, true)

# Thèmes disponibles
themes = Dict("Clair" => "light", "Sombre" => "dark")
theme_choice = GtkComboBoxText()
for (name, _) in themes
    push!(theme_choice, name)
end

# Zone d'affichage du résultat
display = GtkEntry()

# Zone d'affichage des formules
formula_display = GtkTextView(buffer=GtkTextBuffer())

# Champs pour l'image de fond personnalisée
wallpaper_button = GtkFileChooserButton("Choisir une image", GtkFileChooserAction.OPEN)
wallpaper = GtkImage()

# Fonction pour appliquer un thème
function apply_theme(theme::String)
    if theme == "Clair"
        Gtk.set_gtk_property!(win, :style, Gtk.STYLE_LIGHT)
    elseif theme == "Sombre"
        Gtk.set_gtk_property!(win, :style, Gtk.STYLE_DARK)
    end
end

# Gestion du changement de thème
signal_connect(theme_choice, "changed") do widget
    selected_theme = Gtk.get_gtk_property(widget, :active_text)
    apply_theme(themes[selected_theme])
end

# Fonction pour afficher l'image de fond
signal_connect(wallpaper_button, "file-set") do widget
    filepath = GtkFileChooser.get_filename(widget)
    wallpaper = GtkImage(filepath)
    GtkGrid.attach(wallpaper_grid, wallpaper, 0, 0, 1, 1)
end

# Création d'un grid pour la disposition des boutons
grid = GtkGrid()
for i in 1:3
    for j in 1:4
        btn = GtkButton(" ")
        GtkGrid.attach(grid, btn, i, j, 1, 1)
    end
end

# Fonctionnalités de calcul
function eval_expr(expression::String)
    try
        result = parse_expr(expression) |> eval
        return string(result)
    catch
        return "Erreur"
    end
end

# Signal pour effectuer le calcul lors de la validation
signal_connect(display, "activate") do widget
    expression = Gtk.get_gtk_property(widget, :text)
    result = eval_expr(expression)
    Gtk.set_gtk_property!(widget, :text, result)
end

# Ajout de formules scientifiques prédéfinies
function display_formula(topic::String)
    if topic == "intégrale"
        return "∫ f(x) dx"
    elseif topic == "dérivée"
        return "f'(x) = lim (h → 0) [f(x+h) - f(x)] / h"
    elseif topic == "loi d'Ohm"
        return "V = IR"
    else
        return "Formule non trouvée"
    end
end

# Zone de texte pour les formules
signal_connect(formula_display, "activate") do widget
    topic = Gtk.get_gtk_property(widget, :text)
    formula = display_formula(topic)
    Gtk.set_gtk_property!(widget, :text, formula)
end

# Ajout des composants à la fenêtre principale
vbox = GtkBox(:vbox, 5)
push!(vbox, theme_choice)
push!(vbox, display)
push!(vbox, formula_display)
push!(vbox, wallpaper_button)
push!(vbox, wallpaper)
push!(vbox, grid)

GtkContainer.add(win, vbox)
showall(win)
